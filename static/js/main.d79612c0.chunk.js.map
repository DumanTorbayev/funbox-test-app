{"version":3,"sources":["components/BuyButton.jsx","components/FoodCard.jsx","data.js","App.js","serviceWorker.js","index.js"],"names":["BuyButton","setSelected","onClick","FoodCard","disabled","foodName","ingredient","servingsCount","giftCount","weight","useState","selected","leave","setLeave","compare","className","onMouseEnter","onMouseLeave","name","aria-hidden","xmlns","viewBox","width","height","preserveAspectRatio","fillRule","strokeWidth","d","description","notFound","foods","nyamushka","id","App","map","data","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sLAUeA,EARG,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,YAChB,OACI,2KAC+B,4BAAQC,QAAS,kBAAMD,GAAY,KAAnC,+BCsCxBE,EAxCE,SAAC,GAAwE,IAAvEC,EAAsE,EAAtEA,SAAUC,EAA4D,EAA5DA,SAAUC,EAAkD,EAAlDA,WAAYC,EAAsC,EAAtCA,cAAeC,EAAuB,EAAvBA,UAAWC,EAAY,EAAZA,OAAY,EACrDC,oBAAS,GAD4C,mBAC9EC,EAD8E,KACpEV,EADoE,OAE3DS,oBAAS,GAFkD,mBAE9EE,EAF8E,KAEvEC,EAFuE,KAI/EC,EAAwB,OAAdN,EAAqB,2BACjCA,EAAY,GAAKA,GAAa,EAAI,2BAC9BA,GAAa,EAAI,iCAAU,GAEnC,OACI,yBAAKO,UAAS,uBAAkBJ,EAAW,WAAaP,EAAW,WAAa,KAC5E,yBAAKW,UAAU,OAAOb,QAAS,kBAAMD,GAAaU,IAAWK,aAAc,kBAAMH,GAAS,IACrFI,aAAc,kBAAMJ,GAAS,KAC9B,uBAAGE,UAAS,0BAAqBH,GAASD,EAAW,QAAU,KAC1DC,GAASD,EAAW,0FAAsB,gJAE/C,wBAAII,UAAU,eAAeV,GAC7B,uBAAGU,UAAU,yBAAb,UAAwCT,EAAWY,MACnD,uBAAGH,UAAU,qBAAqBR,EAAlC,yCACA,uBAAGQ,UAAU,qBAAqBP,EAAlC,IAA8CM,EAA9C,sDACA,yBAAKC,UAAU,eACX,0BAAMA,UAAU,UAAUN,GAC1B,0BAAMM,UAAU,QAAhB,iBAEJ,yBAAKA,UAAU,mBAAmBI,cAAY,OAAOC,MAAM,6BACtDC,QAAQ,cAAcC,MAAM,IAAIC,OAAO,IAAIC,oBAAoB,QAChE,0BAAMC,SAAS,UAAUC,YAAY,IAC/BC,EAAE,mGAIhB,uBAAGZ,UAAU,oBACRJ,EACKL,EAAWsB,YACbxB,EAAWE,EAAWuB,SAAW,kBAAC,EAAD,CAAW5B,YAAaA,OCpChE6B,EAAQ,CACjBC,UAAW,CACP,CACIC,GAAI,EACJ5B,UAAU,EACVC,SAAU,6CACVC,WAAY,CACRY,KAAM,wCACNU,YAAa,4LACbC,SAAU,gKAEdtB,cAAe,GACfC,UAAW,KACXC,OAAQ,OAEZ,CACIuB,GAAI,EACJ5B,UAAU,EACVC,SAAU,6CACVC,WAAY,CACRY,KAAM,iCACNU,YAAa,oPACbC,SAAU,yJAEdtB,cAAe,GACfC,UAAW,EACXC,OAAQ,GAEZ,CACIuB,GAAI,EACJ5B,UAAU,EACVC,SAAU,6CACVC,WAAY,CACRY,KAAM,iCACNU,YAAa,8LACbC,SAAU,yJAEdtB,cAAe,IACfC,UAAW,EACXC,OAAQ,KCvBLwB,EAZH,WACR,OACI,yBAAKlB,UAAU,aACX,wBAAIA,UAAU,SAAd,sIAEA,yBAAKA,UAAU,uBACVe,EAAMC,UAAUG,KAAK,SAAAC,GAAI,OAAI,kBAAC,EAAD,eAAUC,IAAKD,EAAKH,IAAQG,UCEtDE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDyHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.d79612c0.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst BuyButton = ({setSelected}) => {\r\n    return (\r\n        <>\r\n            Чего сидишь? Порадуй котэ, <button onClick={() => setSelected(true)}>купи.</button>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default BuyButton;\r\n","import React, {useState} from 'react';\r\nimport BuyButton from \"./BuyButton\";\r\n\r\nconst FoodCard = ({disabled, foodName, ingredient, servingsCount, giftCount, weight}) => {\r\n    const [selected, setSelected] = useState(false);\r\n    const [leave, setLeave] = useState(true)\r\n\r\n    const compare = giftCount === null ? 'мышь' :\r\n        giftCount > 1 && giftCount <= 4 ? 'мыши' :\r\n            giftCount <= 5 ? 'мышей' : '';\r\n\r\n    return (\r\n        <div className={`card-wrapper ${selected ? 'selected' : disabled ? 'disabled' : ''}`}>\r\n            <div className='card' onClick={() => setSelected(!selected)} onMouseEnter={() => setLeave(true)}\r\n                 onMouseLeave={() => setLeave(false)} >\r\n                <p className={`card__head-text ${leave && selected ? 'leave' : ''}`}>\r\n                    {leave && selected ? 'Котэ не одобряет?' : 'Сказочное заморское яство'}\r\n                </p>\r\n                <h2 className='card__title'>{foodName}</h2>\r\n                <p className='card__ingredient-text'>с {ingredient.name}</p>\r\n                <p className='card__second-text'>{servingsCount} порций</p>\r\n                <p className='card__second-text'>{giftCount} {compare} в подарок</p>\r\n                <div className='card__badge'>\r\n                    <span className='number'>{weight}</span>\r\n                    <span className='text'>кг</span>\r\n                </div>\r\n                <svg className=\"card__background\" aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\"\r\n                     viewBox=\"0 0 324 484\" width=\"0\" height=\"0\" preserveAspectRatio=\"none\">\r\n                    <path fillRule=\"evenodd\" strokeWidth=\"4\"\r\n                          d=\"M310 482H14c-6.63 0-12-5.37-12-12V45L45 2h265c6.63 0 12 5.37 12 12v456c0 6.63-5.37 12-12 12z\"/>\r\n                </svg>\r\n            </div>\r\n\r\n            <p className='card-description'>\r\n                {selected\r\n                    ? ingredient.description :\r\n                    disabled ? ingredient.notFound : <BuyButton setSelected={setSelected}/>\r\n                }\r\n            </p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FoodCard;\r\n","export const foods = {\r\n    nyamushka: [\r\n        {\r\n            id: 1,\r\n            disabled: false,\r\n            foodName: 'Нямушка',\r\n            ingredient: {\r\n                name: 'фуа-гра',\r\n                description: 'Печень утки разварная с артишоками.',\r\n                notFound: 'Печалька, с фуа-гра закончился.'\r\n            },\r\n            servingsCount: 10,\r\n            giftCount: null,\r\n            weight: '0,5'\r\n        },\r\n        {\r\n            id: 2,\r\n            disabled: false,\r\n            foodName: 'Нямушка',\r\n            ingredient: {\r\n                name: 'рыбой',\r\n                description: 'Головы щучьи с чесноком да свежайшая сёмгушка.',\r\n                notFound: 'Печалька, с рыбой закончился.'\r\n            },\r\n            servingsCount: 40,\r\n            giftCount: 2,\r\n            weight: 2\r\n        },\r\n        {\r\n            id: 3,\r\n            disabled: true,\r\n            foodName: 'Нямушка',\r\n            ingredient: {\r\n                name: 'курой',\r\n                description: 'Филе из цыплят с трюфелями в бульоне.',\r\n                notFound: 'Печалька, с курой закончился.'\r\n            },\r\n            servingsCount: 100,\r\n            giftCount: 5,\r\n            weight: 5\r\n        }\r\n    ]\r\n}\r\n","import React from 'react';\nimport FoodCard from \"./components/FoodCard\";\nimport {foods} from \"./data\";\n\nconst App = () => {\n    return (\n        <div className='container'>\n            <h1 className='title'>Ты сегодня покормил кота?</h1>\n\n            <div className='food-card-container'>\n                {foods.nyamushka.map( data => <FoodCard key={data.id} {...data} /> )}\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './scss/index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}